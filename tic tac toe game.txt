import pygame, sys
import numpy as np
from pygame.locals import *

pygame.init()
pygame.font.init()

height = 600
width = 600 
line_width = 10
board_row = 3
board_col = 3
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
GREEN = (50, 255, 50)
RED = (255, 0, 0)
BLUEGREEN = (28, 170, 156)
CIRCLE_RADIUS = 60
CIRCLE_WIDTH = 15
CROSS_WIDTH = 25
SPACE = 55
LIGHTBLACK = (66, 66, 66)
DARKORANGE = (255,140,0)
GOLD = (255,215,0)
DEEPPINK = (255,20,147)


screen = pygame.display.set_mode((width,height))
pygame.display.set_caption(' TIC TAC TOE')
screen.fill(BLACK)

#board
board = np.zeros( (board_row, board_col) )
#print(board)

def draw_lines():
    #1 horizontal line
    pygame.draw.line(screen, BLUEGREEN, (35,200), (535,200), line_width)
    #2 horizontal line
    pygame.draw.line(screen, BLUEGREEN, (35,400), (535,400), line_width)
    #1 vertical line
    pygame.draw.line(screen, BLUEGREEN, (200,35), (200,535), line_width)
    #2 vertical line
    pygame.draw.line(screen, BLUEGREEN, (400,35), (400,535), line_width)


def draw_figures():
    for row in range(board_row):
        for col in range(board_col):
            if board[row][col] == 1:
               pygame.draw.circle(screen, GOLD, (int(col *200 + 100 ), int( row * 200 + 100)), CIRCLE_RADIUS, CIRCLE_WIDTH) 
            if board[row][col] == 2:
                pygame.draw.line(screen, DEEPPINK, (col * 200 + SPACE, row * 200 + 200 - SPACE), ( col * 200 + 200 - SPACE, row *200 + SPACE), CROSS_WIDTH)
                pygame.draw.line(screen, DEEPPINK, (col * 200 + SPACE, row * 200 + SPACE), (col * 200 + 200 - SPACE, row *200 + 200 - SPACE), CROSS_WIDTH)


def mark_square(row, col, player):
    board[row][col] = player

def available(row,col):
    #return board[row][col] == 0
    #either the above line or the if-else loop, both are same
    
    if board[row][col] == 0:
        return True
    else:
        return False

def iS_board_full():
    for row in range(board_row):
        for col in range(board_col):
            if board[row][col] == 0:
                return False
            
    return True

def check_win(player):
    #vertical line
    for col in range(board_col):
        if board[0][col] == player and board[1][col] == player and board[2][col] == player:
            vertical_winning_line(col,player)
            return True

    #orizontal line
    for row in range(board_row):
        if board[row][0] == player and board[row][1] == player and board[row][2] == player:
            horizontal_winning_line(row, player)
            return True

    #right diagonal
    if board[0][2] == player and board[1][1] == player and board[2][0] == player:
        right_diagonal(player)
        return True

    #left diagonal
    if board[0][0] == player and board[1][1] == player and board[2][2] == player:
        left_diagonal(player)
        return True


def vertical_winning_line(col, player):
    posX = col * 200 + 100
    if player == 1:
        color = GOLD
    elif player == 2:
        color = DEEPPINK
    pygame.draw.line(screen, color, (posX, 35), (posX, height - 35), 15)
            

def horizontal_winning_line(row, player):
    posY = row * 200 + 100
    if player == 1:
        color = GOLD
    elif player == 2:
        color = DEEPPINK
    
    pygame.draw.line(screen, color, (35, posY), (width - 35, posY), 15)

def right_diagonal(player):
    if player == 1:
        color = GOLD
    elif player == 2:
        color = DEEPPINK
    
    pygame.draw.line(screen, color, (35, height-35), (width - 35, 35), 15)

def left_diagonal(player):
    if player == 1:
        color = GOLD
    elif player == 2:
        color = DEEPPINK
    
    pygame.draw.line(screen, color, (35, 35), (width - 15, height - 35), 15)

def restart():
    screen.fill(BLACK)
    draw_lines
    player= 1
    for row in range(board_row):
        for col in range (board_col):
            board[row][col] == 0
 
draw_lines()

player = 1
gameover = False

#mainloop
while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            sys.exit()
        
        if event.type == pygame.MOUSEBUTTONDOWN and not gameover:

            mouseX = event.pos[0]
            mouseY = event.pos[1]

            clicked_row = int(mouseY // 200)
            clicked_col = int(mouseX // 200)

            # print(clicked_row)
            # print(clicked_col)

            if available(clicked_row, clicked_col):
                if player == 1:
                    mark_square(clicked_row, clicked_col, 1)
                    if check_win(player):
                        gameover = True
                    player = 2
                elif player == 2:
                    mark_square(clicked_row, clicked_col, 2)
                    if check_win(player):
                        gameover = True
                    player = 1
            print(draw_figures())
            



        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_r:
                restart()
                gameover = False



    pygame.display.update()

